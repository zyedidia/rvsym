// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_REG_INIT
  `define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
  `define RANDOMIZE
`endif

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif
`else
  `define INIT_RANDOM_PROLOG_
`endif

// VCS coverage exclude_file
module regs_combMem(	// RegFile.scala:21:17
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [4:0]  R1_addr,
  input         R1_en,
                R1_clk,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data,
  output [31:0] R0_data,
                R1_data);

  reg [31:0] Memory[0:31];	// RegFile.scala:21:17
  always @(posedge W0_clk) begin	// RegFile.scala:21:17
    if (W0_en)	// RegFile.scala:21:17
      Memory[W0_addr] <= W0_data;	// RegFile.scala:21:17
  end // always @(posedge)
  `ifndef SYNTHESIS	// RegFile.scala:21:17
    `ifdef RANDOMIZE_MEM_INIT	// RegFile.scala:21:17
      integer initvar;	// RegFile.scala:21:17
      reg [31:0] _RANDOM_MEM;	// RegFile.scala:21:17
    `endif
    initial begin	// RegFile.scala:21:17
      `INIT_RANDOM_PROLOG_	// RegFile.scala:21:17
      `ifdef RANDOMIZE_MEM_INIT	// RegFile.scala:21:17
        for (initvar = 0; initvar < 32; initvar = initvar + 1) begin
          _RANDOM_MEM = {`RANDOM};
          Memory[initvar] = _RANDOM_MEM[31:0];
        end	// RegFile.scala:21:17
      `endif
    end // initial
  `endif
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;	// RegFile.scala:21:17
  assign R1_data = R1_en ? Memory[R1_addr] : 32'bx;	// RegFile.scala:21:17
endmodule

module RegFile(
  input         clock,
                io_wen,
  input  [4:0]  io_raddr1,
                io_raddr2,
                io_waddr,
  input  [31:0] io_wdata,
  output [31:0] io_rdata1,
                io_rdata2);

  regs_combMem regs_ext (	// RegFile.scala:21:17
    .R0_addr (io_raddr1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R1_addr (io_raddr2),
    .R1_en   (1'h1),
    .R1_clk  (clock),
    .W0_addr (io_waddr),
    .W0_en   (io_wen & |io_waddr),	// RegFile.scala:26:{15,27}
    .W0_clk  (clock),
    .W0_data (io_wdata),
    .R0_data (io_rdata1),
    .R1_data (io_rdata2)
  );
endmodule

module Fetch(
  input         clock,
                reset,
  input  [1:0]  io_ctrl_pc_sel,
  input         io_ctrl_stall,
                io_epc_valid,
  input  [31:0] io_epc_bits,
  input         io_br_taken,
  input  [31:0] io_alu_out,
  output [31:0] io_imem_addr,
                io_pc);

  reg  [31:0] pc;	// Fetch.scala:28:19
  wire [31:0] _GEN = io_epc_valid ? io_epc_bits : io_ctrl_stall | io_ctrl_pc_sel == 2'h2 ? pc : io_ctrl_pc_sel
                == 2'h1 | io_br_taken ? io_alu_out & 32'hFFFFFFFE : pc + 32'h4;	// Fetch.scala:28:19, :33:22, :34:10, :35:{28,46,63}, :36:10, :37:{29,43,59}, :38:{10,24,26}, :40:{10,16}
  always @(posedge clock) begin
    if (reset)
      pc <= 32'h100000;	// Fetch.scala:28:19
    else
      pc <= _GEN;	// Fetch.scala:28:19, :33:22, :34:10, :35:63
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef RANDOMIZE_REG_INIT
      reg [31:0] _RANDOM;	// Fetch.scala:28:19
    `endif
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      `INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM = {`RANDOM};	// Fetch.scala:28:19
        pc = _RANDOM;	// Fetch.scala:28:19
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_imem_addr = _GEN;	// Fetch.scala:33:22, :34:10, :35:63
  assign io_pc = pc;	// Fetch.scala:28:19
endmodule

module Alu(
  input  [31:0] io_a,
                io_b,
  input  [3:0]  io_op,
  output [31:0] io_out);

  reg  [31:0] casez_tmp;	// Alu.scala:31:17, :32:30
  wire [31:0] _sum_T_1 = io_a + (io_op == 4'h1 ? 32'h0 - io_b : io_b);	// Alu.scala:27:{14,29}, :28:{7,10}, :30:27
  wire [31:0] _GEN = {27'h0, io_b[4:0]};	// Alu.scala:22:19, :40:38
  wire [62:0] _GEN_0 = {31'h0, io_a} << io_b[4:0];	// Alu.scala:22:19, :37:30, :38:38
  always @(*) begin	// Alu.scala:24:10, :31:17, :32:30, :33:30, :34:30, :35:30, :36:30, :37:30, :38:30, :39:30, :40:30, :41:30, :42:30
    casez (io_op)	// Alu.scala:24:10, :31:17, :32:30, :33:30, :34:30, :35:30, :36:30, :37:30, :38:30, :39:30, :40:30, :41:30, :42:30
      4'b0000:
        casez_tmp = _sum_T_1;	// Alu.scala:24:10, :30:27, :31:17, :32:30, :33:30, :34:30, :35:30, :36:30, :37:30, :38:30, :39:30, :40:30, :41:30, :42:30
      4'b0001:
        casez_tmp = _sum_T_1;	// Alu.scala:24:10, :30:27, :31:17, :32:30, :33:30, :34:30, :35:30, :36:30, :37:30, :38:30, :39:30, :40:30, :41:30, :42:30
      4'b0010:
        casez_tmp = io_a & io_b;	// Alu.scala:24:10, :31:17, :32:30, :33:30, :34:{30,38}, :35:30, :36:30, :37:30, :38:30, :39:30, :40:30, :41:30, :42:30
      4'b0011:
        casez_tmp = io_a | io_b;	// Alu.scala:24:10, :31:17, :32:30, :33:30, :34:30, :35:{30,38}, :36:30, :37:30, :38:30, :39:30, :40:30, :41:30, :42:30
      4'b0100:
        casez_tmp = io_a ^ io_b;	// Alu.scala:24:10, :31:17, :32:30, :33:30, :34:30, :35:30, :36:{30,38}, :37:30, :38:30, :39:30, :40:30, :41:30, :42:30
      4'b0101:
        casez_tmp = {31'h0, $signed(io_a) < $signed(io_b)};	// Alu.scala:24:10, :31:17, :32:30, :33:30, :34:30, :35:30, :36:30, :37:{30,45}, :38:30, :39:30, :40:30, :41:30, :42:30
      4'b0110:
        casez_tmp = _GEN_0[31:0];	// Alu.scala:24:10, :31:17, :32:30, :33:30, :34:30, :35:30, :36:30, :37:30, :38:{30,38}, :39:30, :40:30, :41:30, :42:30
      4'b0111:
        casez_tmp = {31'h0, io_a < io_b};	// Alu.scala:24:10, :31:17, :32:30, :33:30, :34:30, :35:30, :36:30, :37:30, :38:30, :39:{30,38}, :40:30, :41:30, :42:30
      4'b1000:
        casez_tmp = io_a >> _GEN;	// Alu.scala:24:10, :31:17, :32:30, :33:30, :34:30, :35:30, :36:30, :37:30, :38:30, :39:30, :40:{30,38}, :41:30, :42:30
      4'b1001:
        casez_tmp = $signed($signed(io_a) >>> _GEN);	// Alu.scala:24:10, :31:17, :32:30, :33:30, :34:30, :35:30, :36:30, :37:30, :38:30, :39:30, :40:{30,38}, :41:{30,46}, :42:30
      4'b1010:
        casez_tmp = io_a;	// Alu.scala:24:10, :31:17, :32:30, :33:30, :34:30, :35:30, :36:30, :37:30, :38:30, :39:30, :40:30, :41:30, :42:30
      4'b1011:
        casez_tmp = io_b;	// Alu.scala:24:10, :31:17, :32:30, :33:30, :34:30, :35:30, :36:30, :37:30, :38:30, :39:30, :40:30, :41:30, :42:30
      4'b1100:
        casez_tmp = io_a;	// Alu.scala:24:10, :31:17, :32:30, :33:30, :34:30, :35:30, :36:30, :37:30, :38:30, :39:30, :40:30, :41:30, :42:30
      4'b1101:
        casez_tmp = io_a;	// Alu.scala:24:10, :31:17, :32:30, :33:30, :34:30, :35:30, :36:30, :37:30, :38:30, :39:30, :40:30, :41:30, :42:30
      4'b1110:
        casez_tmp = io_a;	// Alu.scala:24:10, :31:17, :32:30, :33:30, :34:30, :35:30, :36:30, :37:30, :38:30, :39:30, :40:30, :41:30, :42:30
      default:
        casez_tmp = io_a;	// Alu.scala:24:10, :31:17, :32:30, :33:30, :34:30, :35:30, :36:30, :37:30, :38:30, :39:30, :40:30, :41:30, :42:30
    endcase	// Alu.scala:24:10, :31:17, :32:30, :33:30, :34:30, :35:30, :36:30, :37:30, :38:30, :39:30, :40:30, :41:30, :42:30
  end // always @(*)
  assign io_out = casez_tmp;	// Alu.scala:31:17, :32:30
endmodule

module Branch(
  input  [31:0] io_rs1,
                io_rs2,
  input  [2:0]  io_br_type,
  output        io_taken);

  reg  casez_tmp;	// Branch.scala:21:22, :22:31
  wire eq = io_rs1 == io_rs2;	// Branch.scala:16:19
  wire lt = $signed(io_rs1) < $signed(io_rs2);	// Branch.scala:17:26
  wire ltu = io_rs1 < io_rs2;	// Branch.scala:18:20
  wire _GEN = io_br_type == 3'h4 & ~ltu;	// Branch.scala:18:20, :20:12, :21:22, :27:{31,34}
  always @(*) begin	// Branch.scala:21:22, :22:31, :23:31, :24:31, :25:31, :26:31
    casez (io_br_type)	// Branch.scala:21:22, :22:31, :23:31, :24:31, :25:31, :26:31
      3'b000:
        casez_tmp = _GEN;	// Branch.scala:20:12, :21:22, :22:31, :23:31, :24:31, :25:31, :26:31, :27:31
      3'b001:
        casez_tmp = ltu;	// Branch.scala:18:20, :21:22, :22:31, :23:31, :24:31, :25:31, :26:31
      3'b010:
        casez_tmp = lt;	// Branch.scala:17:26, :21:22, :22:31, :23:31, :24:31, :25:31, :26:31
      3'b011:
        casez_tmp = eq;	// Branch.scala:16:19, :21:22, :22:31, :23:31, :24:31, :25:31, :26:31
      3'b100:
        casez_tmp = _GEN;	// Branch.scala:20:12, :21:22, :22:31, :23:31, :24:31, :25:31, :26:31, :27:31
      3'b101:
        casez_tmp = ~lt;	// Branch.scala:17:26, :21:22, :22:31, :23:31, :24:31, :25:{31,34}, :26:31
      3'b110:
        casez_tmp = ~eq;	// Branch.scala:16:19, :21:22, :22:31, :23:{31,34}, :24:31, :25:31, :26:31
      default:
        casez_tmp = _GEN;	// Branch.scala:20:12, :21:22, :22:31, :23:31, :24:31, :25:31, :26:31, :27:31
    endcase	// Branch.scala:21:22, :22:31, :23:31, :24:31, :25:31, :26:31
  end // always @(*)
  assign io_taken = casez_tmp;	// Branch.scala:21:22, :22:31
endmodule

module Execute(
  input  [2:0]  io_ctrl_imm_sel,
                io_ctrl_ld_type,
  input  [1:0]  io_ctrl_st_type,
  input  [3:0]  io_ctrl_alu_op,
  input  [1:0]  io_ctrl_a_sel,
                io_ctrl_b_sel,
  input  [2:0]  io_ctrl_br_type,
  input  [31:0] io_data_inst,
                io_data_pc,
                io_rf_rs1r,
                io_rf_rs2r,
  output [4:0]  io_data_rd,
  output [11:0] io_data_csr,
  output [31:0] io_data_alu_out,
  output        io_data_br_taken,
                io_dmem_req,
  output [31:0] io_dmem_addr,
  output        io_dmem_we,
  output [3:0]  io_dmem_be,
  output [31:0] io_dmem_wdata,
  output [4:0]  io_rf_rs1,
                io_rf_rs2);

  wire [31:0]  _alu_io_out;	// Execute.scala:63:19
  reg  [31:0]  casez_tmp;	// Execute.scala:54:27, :55:25
  wire [19:0]  _GEN = {20{io_data_inst[31]}};	// Execute.scala:55:25
  wire [31:0]  _GEN_0 = {27'h0, io_data_inst[19:15]};	// Execute.scala:44:28, :60:25
  always @(*) begin	// Execute.scala:54:27, :55:25, :56:25, :57:25, :58:25, :59:25
    casez (io_ctrl_imm_sel)	// Execute.scala:54:27, :55:25, :56:25, :57:25, :58:25, :59:25
      3'b000:
        casez_tmp = _GEN_0;	// Execute.scala:54:27, :55:25, :56:25, :57:25, :58:25, :59:25, :60:25
      3'b001:
        casez_tmp = {_GEN, io_data_inst[31:20]};	// Execute.scala:47:30, :54:27, :55:25, :56:25, :57:25, :58:25, :59:25
      3'b010:
        casez_tmp = {_GEN, io_data_inst[31:25], io_data_inst[11:7]};	// Execute.scala:46:29, :54:27, :55:25, :56:{25,36}, :57:25, :58:25, :59:25
      3'b011:
        casez_tmp = {io_data_inst[31:12], 12'h0};	// Cat.scala:33:92, Execute.scala:54:27, :55:25, :56:25, :57:25, :58:{25,36}, :59:25
      3'b100:
        casez_tmp = {{12{io_data_inst[31]}}, io_data_inst[19:12], io_data_inst[20], io_data_inst[30:21], 1'h0};	// Cat.scala:33:92, Execute.scala:54:27, :55:25, :56:25, :57:25, :58:25, :59:{25,36,46,60}
      3'b101:
        casez_tmp = {{20{io_data_inst[31]}}, io_data_inst[7], io_data_inst[30:25], io_data_inst[11:8], 1'h0};	// Cat.scala:33:92, Execute.scala:54:27, :55:25, :56:25, :57:{25,36,46,55,69}, :58:25, :59:25
      3'b110:
        casez_tmp = _GEN_0;	// Execute.scala:54:27, :55:25, :56:25, :57:25, :58:25, :59:25, :60:25
      default:
        casez_tmp = _GEN_0;	// Execute.scala:54:27, :55:25, :56:25, :57:25, :58:25, :59:25, :60:25
    endcase	// Execute.scala:54:27, :55:25, :56:25, :57:25, :58:25, :59:25
  end // always @(*)
  wire [286:0] _GEN_1 = {255'h0, io_rf_rs2r} << {282'h0, _alu_io_out[1:0], 3'h0};	// Execute.scala:63:19, :71:{32,40}, :79:31
  wire [4:0]   _GEN_2 = 5'h3 << _alu_io_out[1:0];	// Execute.scala:63:19, :83:{43,56}
  Alu alu (	// Execute.scala:63:19
    .io_a   (io_ctrl_a_sel == 2'h2 ? io_rf_rs1r : io_data_pc),	// Execute.scala:54:27, :67:{18,33}
    .io_b   (io_ctrl_b_sel == 2'h2 ? io_rf_rs2r : casez_tmp),	// Execute.scala:54:27, :55:25, :68:{18,33}
    .io_op  (io_ctrl_alu_op),
    .io_out (_alu_io_out)
  );
  Branch br (	// Execute.scala:87:18
    .io_rs1     (io_rf_rs1r),
    .io_rs2     (io_rf_rs2r),
    .io_br_type (io_ctrl_br_type),
    .io_taken   (io_data_br_taken)
  );
  assign io_data_rd = io_data_inst[11:7];	// Execute.scala:46:29
  assign io_data_csr = io_data_inst[31:20];	// Execute.scala:47:30
  assign io_data_alu_out = _alu_io_out;	// Execute.scala:63:19
  assign io_dmem_req = |io_ctrl_ld_type | (|io_ctrl_st_type);	// Execute.scala:73:37, :74:37, :76:30
  assign io_dmem_addr = _alu_io_out & 32'hFFFFFFFC;	// Execute.scala:63:19, :70:{26,28}
  assign io_dmem_we = |io_ctrl_st_type;	// Execute.scala:74:37
  assign io_dmem_be = io_ctrl_st_type == 2'h2 ? _GEN_2[3:0] : &io_ctrl_st_type ? 4'h1 << _alu_io_out[1:0] : 4'hF;	// Execute.scala:54:27, :63:19, :81:14, :82:27, :83:{32,43}, :84:{32,42,55}
  assign io_dmem_wdata = _GEN_1[31:0];	// Execute.scala:79:{17,31}
  assign io_rf_rs1 = io_data_inst[19:15];	// Execute.scala:44:28
  assign io_rf_rs2 = io_data_inst[24:20];	// Execute.scala:45:28
endmodule

module Writeback(
  input  [1:0]  io_ctrl_wb_sel,
  input         io_ctrl_wb_en,
  input  [2:0]  io_ctrl_ld_type,
  input  [31:0] io_data_ld,
                io_data_pc,
                io_data_alu_out,
                io_data_csr_rdata,
                io_data_rd,
  output        io_rf_wen,
  output [4:0]  io_rf_waddr,
  output [31:0] io_rf_wdata);

  reg  [31:0] casez_tmp;	// Writeback.scala:50:26, :51:33
  wire [31:0] _GEN = io_data_ld >> {27'h0, io_data_alu_out[1:0], 3'h0};	// Writeback.scala:35:{35,43}, :36:28
  always @(*) begin	// Writeback.scala:50:26, :51:33, :52:33, :53:33
    casez (io_ctrl_wb_sel)	// Writeback.scala:50:26, :51:33, :52:33, :53:33
      2'b00:
        casez_tmp = io_data_alu_out;	// Writeback.scala:50:26, :51:33, :52:33, :53:33
      2'b01:
        casez_tmp = io_ctrl_ld_type == 3'h2 ? {{16{_GEN[15]}}, _GEN[15:0]} : io_ctrl_ld_type == 3'h3 ?
                                                                {{24{_GEN[7]}}, _GEN[7:0]} : io_ctrl_ld_type == 3'h4 ? {16'h0, _GEN[15:0]} :
                                                                io_ctrl_ld_type == 3'h5 ? {24'h0, _GEN[7:0]} : io_data_ld;	// Writeback.scala:35:35, :36:28, :39:6, :40:27, :41:{25,35}, :42:{25,35}, :43:{25,35}, :44:{25,35}, :50:26, :51:33, :52:33, :53:33
      2'b10:
        casez_tmp = io_data_pc + 32'h4;	// Writeback.scala:50:26, :51:33, :52:33, :53:{33,47}
      default:
        casez_tmp = io_data_csr_rdata;	// Writeback.scala:50:26, :51:33, :52:33, :53:33
    endcase	// Writeback.scala:50:26, :51:33, :52:33, :53:33
  end // always @(*)
  assign io_rf_wen = io_ctrl_wb_en;
  assign io_rf_waddr = io_data_rd[4:0];	// Writeback.scala:48:15
  assign io_rf_wdata = casez_tmp;	// Writeback.scala:50:26, :51:33
endmodule

module Csr(
  input         clock,
                reset,
  input  [2:0]  io_ctrl_csr_type,
  input         io_ctrl_illegal,
  input  [31:0] io_pc,
  input  [11:0] io_csr,
  input  [4:0]  io_rs1,
  input  [31:0] io_wdata,
  output        io_epc_valid,
  output [31:0] io_epc_bits,
                io_rdata);

  reg         p;	// Csr.scala:79:20
  reg         e;	// Csr.scala:80:20
  reg         p_1;	// Csr.scala:79:20
  reg         e_1;	// Csr.scala:80:20
  reg         p_2;	// Csr.scala:79:20
  reg         e_2;	// Csr.scala:80:20
  reg  [1:0]  mpp;	// Csr.scala:88:20
  reg         mpie;	// Csr.scala:89:21
  reg         mie;	// Csr.scala:90:20
  reg  [1:0]  priv;	// Csr.scala:92:21
  reg  [31:0] REG_6;	// Csr.scala:110:25
  reg  [31:0] REG_7;	// Csr.scala:112:28
  reg  [31:0] REG_8;	// Csr.scala:113:20
  reg  [31:0] REG_9;	// Csr.scala:114:22
  wire        _io_rdata_T = io_csr == 12'h344;	// Mux.scala:81:61
  wire        _io_rdata_T_6 = io_csr == 12'h305;	// Mux.scala:81:61
  wire        _io_rdata_T_8 = io_csr == 12'h341;	// Mux.scala:81:61
  wire        _io_rdata_T_10 = io_csr == 12'h342;	// Mux.scala:81:61
  wire        _io_rdata_T_22 = io_csr == 12'h304;	// Mux.scala:81:61
  wire        _io_rdata_T_28 = io_csr == 12'h300;	// Mux.scala:81:61
  wire        _io_rdata_T_38 = io_csr == 12'h340;	// Mux.scala:81:61
  wire [31:0] _io_rdata_T_39 = _io_rdata_T_38 ? REG_7 : io_csr == 12'hC02 | io_csr == 12'hF11 | io_csr == 12'hF14 | io_csr
                == 12'hC82 ? 32'h0 : _io_rdata_T_28 ? {19'h0, mpp, 3'h0, mpie, 3'h0, mie, 3'h0} : io_csr ==
                12'hC00 | io_csr == 12'hF12 ? 32'h0 : _io_rdata_T_22 ? {20'h0, e, 3'h0, e_1, 3'h0, e_2,
                3'h0} : io_csr == 12'h306 | io_csr == 12'hC80 | io_csr == 12'hC01 ? 32'h0 : io_csr ==
                12'h301 ? 32'h40100100 : io_csr == 12'hF13 ? 32'h1388 : _io_rdata_T_10 ? REG_9 :
                _io_rdata_T_8 ? REG_8 : _io_rdata_T_6 ? REG_6 : io_csr == 12'hC81 | io_csr == 12'h343 |
                ~_io_rdata_T ? 32'h0 : {20'h0, p, 3'h0, p_1, 3'h0, p_2, 3'h0};	// Cat.scala:33:92, Csr.scala:79:20, :80:20, :88:20, :89:21, :90:20, :100:28, :110:25, :112:28, :113:20, :114:22, Mux.scala:81:{58,61}
  wire        _isE_T = io_ctrl_csr_type == 3'h4;	// Csr.scala:122:43
  wire        _isE_T_1 = io_ctrl_csr_type == 3'h5;	// Csr.scala:122:43
  wire        _isE_T_3 = io_ctrl_csr_type == 3'h6;	// Csr.scala:122:43
  wire        illegal_priv = ~(&priv) & ~(_isE_T | _isE_T_1 | _isE_T_3);	// Csr.scala:92:21, :122:43, :135:25, :136:48, :137:{22,34,37}
  wire        exception = _isE_T | _isE_T_1 | io_ctrl_illegal | illegal_priv;	// Csr.scala:122:43, :137:34, :139:73
  wire        _wen_T = io_ctrl_csr_type == 3'h1;	// Csr.scala:122:43
  wire        _wen_T_1 = io_ctrl_csr_type == 3'h2;	// Csr.scala:122:43
  wire        _wen_T_3 = io_ctrl_csr_type == 3'h3;	// Csr.scala:122:43
  wire        wen = _wen_T | _wen_T_1 | _wen_T_3 & |io_rs1;	// Csr.scala:122:43, :126:{46,64,74}
  wire [31:0] wdata = _wen_T ? io_wdata : _wen_T_1 ? _io_rdata_T_39 | io_wdata : _wen_T_3 ? _io_rdata_T_39 &
                ~io_wdata : 32'h0;	// Csr.scala:100:28, :122:43, :131:35, :132:{35,37}, Mux.scala:81:58, :101:16
  wire        _GEN = wen & _io_rdata_T_28;	// Csr.scala:88:20, :126:46, :169:19, :170:20, Mux.scala:81:61
  wire        _GEN_0 = exception | _isE_T_3 | ~wen | _io_rdata_T_28 | ~_io_rdata_T;	// Csr.scala:79:20, :122:43, :126:46, :139:73, :144:19, :162:31, :169:19, :170:20, Mux.scala:81:{58,61}
  wire        _GEN_1 = exception | _isE_T_3 | ~wen | _io_rdata_T_28 | _io_rdata_T | ~_io_rdata_T_22;	// Csr.scala:79:20, :80:20, :122:43, :126:46, :139:73, :144:19, :162:31, :169:19, :170:20, Mux.scala:81:61
  always @(posedge clock) begin
    if (reset) begin
      p <= 1'h0;	// Csr.scala:79:20
      e <= 1'h0;	// Csr.scala:79:20, :80:20
      p_1 <= 1'h0;	// Csr.scala:79:20
      e_1 <= 1'h0;	// Csr.scala:79:20, :80:20
      p_2 <= 1'h0;	// Csr.scala:79:20
      e_2 <= 1'h0;	// Csr.scala:79:20, :80:20
      mpp <= 2'h3;	// Csr.scala:88:20
      mpie <= 1'h0;	// Csr.scala:79:20, :89:21
      mie <= 1'h0;	// Csr.scala:79:20, :90:20
      priv <= 2'h3;	// Csr.scala:88:20, :92:21
      REG_6 <= 32'h100000;	// Csr.scala:110:25
      REG_7 <= 32'h0;	// Csr.scala:100:28, :112:28
    end
    else begin
      p <= _GEN_0 ? p : wdata[11];	// Csr.scala:79:20, :144:19, :162:31, :177:23, Mux.scala:101:16
      e <= _GEN_1 ? e : wdata[11];	// Csr.scala:80:20, :144:19, :162:31, :182:23, Mux.scala:101:16
      p_1 <= _GEN_0 ? p_1 : wdata[7];	// Csr.scala:79:20, :144:19, :162:31, :178:23, Mux.scala:101:16
      e_1 <= _GEN_1 ? e_1 : wdata[7];	// Csr.scala:80:20, :144:19, :162:31, :183:23, Mux.scala:101:16
      p_2 <= _GEN_0 ? p_2 : wdata[3];	// Csr.scala:79:20, :144:19, :162:31, :179:23, Mux.scala:101:16
      e_2 <= _GEN_1 ? e_2 : wdata[3];	// Csr.scala:80:20, :144:19, :162:31, :184:23, Mux.scala:101:16
      mpp <= exception ? priv : _isE_T_3 ? 2'h0 : _GEN ? wdata[12:11] : mpp;	// Csr.scala:88:20, :92:21, :122:43, :139:73, :144:19, :150:34, :159:9, :162:31, :165:9, :169:19, :170:20, :172:21, Mux.scala:101:16
      mpie <= exception ? mie : _isE_T_3 | (_GEN ? wdata[7] : mpie);	// Csr.scala:88:20, :89:21, :90:20, :122:43, :139:73, :144:19, :158:10, :162:31, :166:10, :169:19, :170:20, :173:22, Mux.scala:101:16
      mie <= ~exception & (_isE_T_3 ? mpie : _GEN ? wdata[3] : mie);	// Csr.scala:88:20, :89:21, :90:20, :122:43, :139:73, :144:19, :157:9, :162:31, :164:9, :169:19, :170:20, :174:21, Mux.scala:101:16
      priv <= exception ? 2'h3 : _isE_T_3 ? mpp : priv;	// Csr.scala:88:20, :92:21, :122:43, :139:73, :144:19, :156:10, :162:31, :163:10
      REG_6 <= exception | _isE_T_3 | ~wen | _io_rdata_T_28 | _io_rdata_T | _io_rdata_T_22 |
                                                _io_rdata_T_38 | ~_io_rdata_T_6 ? REG_6 : wdata;	// Csr.scala:79:20, :110:25, :122:43, :126:46, :139:73, :144:19, :162:31, :169:19, :170:20, Mux.scala:81:61, :101:16
      REG_7 <= exception | _isE_T_3 | ~wen | _io_rdata_T_28 | _io_rdata_T | _io_rdata_T_22 |
                                                ~_io_rdata_T_38 ? REG_7 : wdata;	// Csr.scala:79:20, :112:28, :122:43, :126:46, :139:73, :144:19, :162:31, :169:19, :170:20, Mux.scala:81:61, :101:16
    end
    REG_8 <= exception ? {io_pc[31:2], 2'h0} : _isE_T_3 | ~wen | _io_rdata_T_28 | _io_rdata_T |
                                _io_rdata_T_22 | _io_rdata_T_38 | _io_rdata_T_6 | ~_io_rdata_T_8 ? REG_8 : {wdata[31:2],
                                2'h0};	// Csr.scala:79:20, :113:20, :122:43, :126:46, :139:73, :144:19, :145:{20,29,34}, :150:34, :162:31, :169:19, :170:20, :188:{41,50}, Mux.scala:81:61, :101:16
    REG_9 <= exception ? {28'h0, _isE_T & (&priv) ? 4'hB : _isE_T & priv == 2'h0 ? 4'h8 : {2'h0,
                                _isE_T_1 ? 2'h3 : io_ctrl_illegal ? 2'h2 : {illegal_priv, 1'h0}}} : _isE_T_3 | ~wen |
                                _io_rdata_T_28 | _io_rdata_T | _io_rdata_T_22 | _io_rdata_T_38 | _io_rdata_T_6 |
                                _io_rdata_T_8 | ~_io_rdata_T_10 ? REG_9 : wdata;	// Csr.scala:79:20, :88:20, :92:21, :114:22, :122:43, :126:46, :135:25, :137:34, :139:73, :144:19, :146:22, :149:26, :150:{26,34}, :162:31, :169:19, :170:20, Mux.scala:81:61, :101:16
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef RANDOMIZE_REG_INIT
      reg [383:0] _RANDOM;	// Csr.scala:79:20
    `endif
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      `INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM = {`RANDOM,`RANDOM,`RANDOM,`RANDOM,`RANDOM,`RANDOM,`RANDOM,`RANDOM,`RANDOM,`RANDOM,`RANDOM,`RANDOM};	// Csr.scala:79:20
        p = _RANDOM[0];	// Csr.scala:79:20
        e = _RANDOM[1];	// Csr.scala:80:20
        p_1 = _RANDOM[2];	// Csr.scala:79:20
        e_1 = _RANDOM[3];	// Csr.scala:80:20
        p_2 = _RANDOM[4];	// Csr.scala:79:20
        e_2 = _RANDOM[5];	// Csr.scala:80:20
        mpp = _RANDOM[7:6];	// Csr.scala:88:20
        mpie = _RANDOM[8];	// Csr.scala:89:21
        mie = _RANDOM[9];	// Csr.scala:90:20
        priv = _RANDOM[11:10];	// Csr.scala:92:21
        REG_6 = _RANDOM[235:204];	// Csr.scala:110:25
        REG_7 = _RANDOM[267:236];	// Csr.scala:112:28
        REG_8 = _RANDOM[299:268];	// Csr.scala:113:20
        REG_9 = _RANDOM[331:300];	// Csr.scala:114:22
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_epc_valid = exception | _isE_T_3;	// Csr.scala:122:43, :139:73, :144:19, :160:18, :162:31
  assign io_epc_bits = exception ? REG_6 : REG_8;	// Csr.scala:110:25, :113:20, :139:73, :144:19, :161:17, :162:31
  assign io_rdata = _io_rdata_T_39;	// Mux.scala:81:58
endmodule

module Control(
  input  [31:0] io_inst,
  output [1:0]  io_sig_pc_sel,
                io_sig_a_sel,
                io_sig_b_sel,
  output [2:0]  io_sig_imm_sel,
  output [3:0]  io_sig_alu_op,
  output [2:0]  io_sig_br_type,
  output        io_sig_inst_kill,
  output [1:0]  io_sig_st_type,
  output [2:0]  io_sig_ld_type,
  output [1:0]  io_sig_wb_sel,
  output        io_sig_wb_en,
                io_sig_illegal,
  output [2:0]  io_sig_csr_type);

  wire [29:0] _GEN = ~(io_inst[31:2]);	// pla.scala:78:21
  wire [7:0]  _io_sig_T = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[2], _GEN[3], _GEN[4], _GEN[11]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [7:0]  _io_sig_T_4 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[2], _GEN[4], _GEN[10], _GEN[12]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [8:0]  _io_sig_T_6 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[2], _GEN[3], _GEN[4], _GEN[10], _GEN[12]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [8:0]  _io_sig_T_8 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[2], _GEN[3], _GEN[4], _GEN[11], _GEN[12]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [13:0] _io_sig_T_12 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[4], _GEN[10], _GEN[11], _GEN[12], _GEN[23],
                _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[29]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [6:0]  _io_sig_T_18 = {io_inst[0], io_inst[1], _GEN[1], io_inst[4], _GEN[3], _GEN[4], _GEN[10]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [7:0]  _io_sig_T_20 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], _GEN[3], _GEN[4], _GEN[10]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [13:0] _io_sig_T_22 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], _GEN[4], _GEN[10], _GEN[23],
                _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[28], _GEN[29]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [13:0] _io_sig_T_24 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], _GEN[4], _GEN[12], _GEN[23],
                _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[28], _GEN[29]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [5:0]  _io_sig_T_26 = {io_inst[0], io_inst[1], io_inst[2], _GEN[1], io_inst[4], _GEN[4]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [8:0]  _io_sig_T_30 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[2], io_inst[5], _GEN[4], _GEN[10],
                _GEN[12]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [7:0]  _io_sig_T_32 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[2], io_inst[5], _GEN[11], _GEN[12]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [8:0]  _io_sig_T_34 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[2], io_inst[5], _GEN[4], _GEN[11],
                _GEN[12]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [13:0] _io_sig_T_36 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], io_inst[5], _GEN[4], _GEN[23],
                _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[28], _GEN[29]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [6:0]  _io_sig_T_40 = {io_inst[0], io_inst[1], io_inst[2], _GEN[1], io_inst[4], io_inst[5], _GEN[4]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [8:0]  _io_sig_T_42 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[2], io_inst[5], io_inst[6], _GEN[10],
                _GEN[11]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [8:0]  _io_sig_T_44 = {io_inst[0], io_inst[1], _GEN[1], _GEN[2], io_inst[5], io_inst[6], _GEN[10], _GEN[11],
                _GEN[12]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [9:0]  _io_sig_T_48 = {io_inst[0], io_inst[1], io_inst[2], _GEN[1], _GEN[2], io_inst[5], io_inst[6], _GEN[10],
                _GEN[11], _GEN[12]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [6:0]  _io_sig_T_50 = {io_inst[0], io_inst[1], io_inst[2], io_inst[3], _GEN[2], io_inst[5], io_inst[6]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [30:0] _io_sig_T_52 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], io_inst[5], io_inst[6], _GEN[5],
                _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14],
                _GEN[15], _GEN[16], _GEN[17], _GEN[19], _GEN[20], _GEN[21], _GEN[22], _GEN[23], _GEN[24],
                _GEN[25], _GEN[26], _GEN[27], _GEN[28], _GEN[29]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [15:0] _io_sig_T_54 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], _GEN[3], _GEN[4], io_inst[12],
                _GEN[12], _GEN[23], _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[28], _GEN[29]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [9:0]  _io_sig_T_58 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[2], io_inst[5], io_inst[6], io_inst[12],
                _GEN[11], _GEN[12]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [8:0]  _io_sig_T_62 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], io_inst[5], io_inst[6], io_inst[12],
                _GEN[12]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [6:0]  _io_sig_T_64 = {io_inst[0], io_inst[1], _GEN[1], io_inst[4], _GEN[3], _GEN[4], io_inst[13]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [8:0]  _io_sig_T_74 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], io_inst[5], io_inst[6], io_inst[13],
                _GEN[12]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [9:0]  _io_sig_T_76 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], _GEN[3], _GEN[4], io_inst[12],
                io_inst[13], _GEN[12]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [8:0]  _io_sig_T_78 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[2], _GEN[3], _GEN[4], _GEN[11],
                io_inst[14]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [13:0] _io_sig_T_80 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], _GEN[3], _GEN[4], io_inst[14],
                _GEN[23], _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[29]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [7:0]  _io_sig_T_82 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[2], io_inst[5], io_inst[6], io_inst[14]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [13:0] _io_sig_T_84 = {io_inst[0], io_inst[1], _GEN[1], io_inst[4], _GEN[4], io_inst[12], _GEN[11], io_inst[14],
                _GEN[23], _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[29]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [15:0] _io_sig_T_86 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], io_inst[5], _GEN[4], io_inst[12],
                _GEN[11], io_inst[14], _GEN[23], _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[29]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [8:0]  _io_sig_T_88 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[2], io_inst[5], io_inst[6], io_inst[12],
                io_inst[14]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [8:0]  _io_sig_T_92 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], io_inst[5], io_inst[6], io_inst[12],
                io_inst[14]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [8:0]  _io_sig_T_96 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], _GEN[3], _GEN[4], io_inst[13],
                io_inst[14]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [14:0] _io_sig_T_98 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], _GEN[4], io_inst[13], io_inst[14],
                _GEN[23], _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[28], _GEN[29]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [9:0]  _io_sig_T_100 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[2], io_inst[5], io_inst[6], _GEN[10],
                io_inst[13], io_inst[14]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [8:0]  _io_sig_T_102 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], io_inst[5], io_inst[6], io_inst[13],
                io_inst[14]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [29:0] _io_sig_T_108 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], io_inst[5], io_inst[6], _GEN[5],
                _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11], _GEN[12], _GEN[13], _GEN[14],
                _GEN[15], _GEN[16], _GEN[17], _GEN[18], io_inst[21], _GEN[20], _GEN[21], _GEN[22],
                _GEN[23], _GEN[24], _GEN[25], _GEN[28], _GEN[29]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  wire [16:0] _io_sig_T_110 = {io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], io_inst[5], _GEN[4], _GEN[10],
                _GEN[11], _GEN[12], _GEN[23], _GEN[24], _GEN[25], _GEN[26], _GEN[27], io_inst[30],
                _GEN[29]};	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29
  assign io_sig_pc_sel = {|{&_io_sig_T_6, &_io_sig_T_8, &_io_sig_T_52, &_io_sig_T_62, &_io_sig_T_74, &_io_sig_T_78,
                &_io_sig_T_92, &_io_sig_T_102, &_io_sig_T_108}, |{&_io_sig_T_48, &_io_sig_T_50,
                &_io_sig_T_108}};	// Cat.scala:33:92, Control.scala:137:71, pla.scala:98:74, :114:39
  assign io_sig_a_sel = {|{&_io_sig_T_6, &_io_sig_T_8, &_io_sig_T_20, &_io_sig_T_30, &_io_sig_T_34, &_io_sig_T_36,
                &_io_sig_T_48, &_io_sig_T_54, &_io_sig_T_62, &_io_sig_T_74, &_io_sig_T_76, &_io_sig_T_78,
                &_io_sig_T_80, &_io_sig_T_86, &_io_sig_T_96, &_io_sig_T_110}, |{&_io_sig_T_26,
                &_io_sig_T_42, &_io_sig_T_50, &_io_sig_T_58, &_io_sig_T_88, &_io_sig_T_100}};	// Cat.scala:33:92, Control.scala:137:71, pla.scala:98:74, :114:39
  assign io_sig_b_sel = {|{&_io_sig_T_36, &_io_sig_T_86, &_io_sig_T_110}, |{&_io_sig_T_6, &_io_sig_T_8,
                &_io_sig_T_20, &_io_sig_T_26, &_io_sig_T_30, &_io_sig_T_34, &_io_sig_T_42, &_io_sig_T_48,
                &_io_sig_T_50, &_io_sig_T_54, &_io_sig_T_58, &_io_sig_T_76, &_io_sig_T_78, &_io_sig_T_80,
                &_io_sig_T_88, &_io_sig_T_96, &_io_sig_T_100}};	// Cat.scala:33:92, Control.scala:137:71, pla.scala:98:74, :114:39
  assign io_sig_imm_sel = {|{&_io_sig_T_42, &_io_sig_T_50, &_io_sig_T_58, &_io_sig_T_88, &_io_sig_T_92,
                &_io_sig_T_100, &_io_sig_T_102}, |{&_io_sig_T_26, &_io_sig_T_30, &_io_sig_T_34,
                &_io_sig_T_92, &_io_sig_T_102}, |{&_io_sig_T_6, &_io_sig_T_8, &_io_sig_T_20, &_io_sig_T_26,
                &_io_sig_T_42, &_io_sig_T_48, &_io_sig_T_54, &_io_sig_T_58, &_io_sig_T_76, &_io_sig_T_78,
                &_io_sig_T_80, &_io_sig_T_88, &_io_sig_T_96, &_io_sig_T_100}};	// Cat.scala:33:92, Control.scala:137:71, pla.scala:98:74, :114:39
  assign io_sig_alu_op = {{&_io_sig_T, &_io_sig_T_4, &_io_sig_T_12, &_io_sig_T_18, &_io_sig_T_22, &_io_sig_T_24,
                &{io_inst[0], io_inst[1], io_inst[2], _GEN[1], io_inst[4], _GEN[3], _GEN[4]},
                &_io_sig_T_32, &_io_sig_T_44, &_io_sig_T_50, &_io_sig_T_64, &_io_sig_T_82, &_io_sig_T_98}
                == 13'h0, {&_io_sig_T, &_io_sig_T_4, &{io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[3],
                _GEN[4], _GEN[10], _GEN[11], _GEN[12]}, &_io_sig_T_12, &_io_sig_T_26, &_io_sig_T_32,
                &_io_sig_T_44, &_io_sig_T_50, &_io_sig_T_62, &_io_sig_T_74, &_io_sig_T_82, &_io_sig_T_84,
                &{io_inst[0], io_inst[1], _GEN[1], io_inst[4], _GEN[3], _GEN[4], io_inst[13], io_inst[14]},
                &_io_sig_T_98} == 14'h0, |{&_io_sig_T_40, &_io_sig_T_54, &{io_inst[0], io_inst[1], _GEN[0],
                _GEN[1], io_inst[4], io_inst[5], io_inst[12], _GEN[12], _GEN[23], _GEN[24], _GEN[25],
                _GEN[26], _GEN[27], _GEN[28], _GEN[29]}, &_io_sig_T_62, &_io_sig_T_74, &_io_sig_T_76,
                &_io_sig_T_96, &_io_sig_T_98}, |{&_io_sig_T_40, &{io_inst[0], io_inst[1], _GEN[0], _GEN[1],
                io_inst[4], _GEN[3], _GEN[4], _GEN[10], io_inst[13]}, &{io_inst[0], io_inst[1], _GEN[0],
                _GEN[1], io_inst[4], _GEN[4], _GEN[10], io_inst[13], _GEN[23], _GEN[24], _GEN[25],
                _GEN[26], _GEN[27], _GEN[28], _GEN[29]}, &{io_inst[0], io_inst[1], _GEN[0], _GEN[1],
                io_inst[4], _GEN[4], io_inst[13], _GEN[12], _GEN[23], _GEN[24], _GEN[25], _GEN[26],
                _GEN[27], _GEN[28], _GEN[29]}, &_io_sig_T_76, &_io_sig_T_110, &{io_inst[0], io_inst[1],
                _GEN[0], _GEN[1], io_inst[4], _GEN[4], io_inst[12], _GEN[11], io_inst[14], _GEN[23],
                _GEN[24], _GEN[25], _GEN[26], _GEN[27], io_inst[30], _GEN[29]}}};	// Cat.scala:33:92, Control.scala:137:71, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39
  assign io_sig_br_type = {|{&_io_sig_T_58, &_io_sig_T_88}, |{&_io_sig_T_42, &_io_sig_T_58}, |{&{io_inst[0],
                io_inst[1], _GEN[0], _GEN[1], _GEN[2], io_inst[5], io_inst[6], _GEN[10], _GEN[11],
                _GEN[12]}, &{io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[2], io_inst[5], io_inst[6],
                io_inst[12], _GEN[11], io_inst[14]}, &_io_sig_T_100}};	// Cat.scala:33:92, Control.scala:137:71, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39
  assign io_sig_inst_kill = |{&_io_sig_T_6, &_io_sig_T_8, &_io_sig_T_48, &_io_sig_T_50, &_io_sig_T_52, &_io_sig_T_62,
                &_io_sig_T_74, &_io_sig_T_78, &_io_sig_T_92, &_io_sig_T_102, &_io_sig_T_108};	// Cat.scala:33:92, pla.scala:98:74, :114:39
  assign io_sig_st_type = {&_io_sig_T_34, &_io_sig_T_30};	// Cat.scala:33:92, Control.scala:137:71, pla.scala:98:74
  assign io_sig_ld_type = {&_io_sig_T_78, &_io_sig_T_8, |{&{io_inst[0], io_inst[1], _GEN[0], _GEN[1], _GEN[2],
                _GEN[3], _GEN[4], _GEN[10], _GEN[11]}, &_io_sig_T_6}};	// Cat.scala:33:92, Control.scala:137:71, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39
  assign io_sig_wb_sel = {|{&_io_sig_T_48, &_io_sig_T_50, &_io_sig_T_52, &_io_sig_T_62, &_io_sig_T_74,
                &_io_sig_T_92, &_io_sig_T_102, &_io_sig_T_108}, |{&_io_sig_T_6, &_io_sig_T_8,
                &_io_sig_T_52, &_io_sig_T_62, &_io_sig_T_74, &_io_sig_T_78, &_io_sig_T_92, &_io_sig_T_102,
                &_io_sig_T_108}};	// Cat.scala:33:92, Control.scala:137:71, pla.scala:98:74, :114:39
  assign io_sig_wb_en = |{&_io_sig_T_6, &_io_sig_T_8, &_io_sig_T_20, &_io_sig_T_26, &_io_sig_T_36, &_io_sig_T_48,
                &_io_sig_T_50, &_io_sig_T_54, &_io_sig_T_62, &_io_sig_T_74, &_io_sig_T_76, &_io_sig_T_78,
                &_io_sig_T_80, &_io_sig_T_86, &_io_sig_T_92, &_io_sig_T_96, &_io_sig_T_102, &_io_sig_T_110};	// Cat.scala:33:92, pla.scala:98:74, :114:39
  assign io_sig_illegal = {&_io_sig_T, &_io_sig_T_4, &_io_sig_T_12, &{io_inst[0], io_inst[1], io_inst[2], io_inst[3],
                _GEN[2], _GEN[3], _GEN[4], _GEN[5], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[10], _GEN[11],
                _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16], _GEN[17], _GEN[26], _GEN[27], _GEN[28],
                _GEN[29]}, &{io_inst[0], io_inst[1], io_inst[2], io_inst[3], _GEN[2], _GEN[3], _GEN[4],
                _GEN[5], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[11], _GEN[12], _GEN[13], _GEN[14],
                _GEN[15], _GEN[16], _GEN[17], _GEN[18], _GEN[19], _GEN[20], _GEN[21], _GEN[22], _GEN[23],
                _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[28], _GEN[29]}, &_io_sig_T_18, &_io_sig_T_22,
                &_io_sig_T_24, &_io_sig_T_26, &_io_sig_T_32, &{io_inst[0], io_inst[1], _GEN[0], _GEN[1],
                io_inst[4], io_inst[5], _GEN[5], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[12], _GEN[13],
                _GEN[14], _GEN[15], _GEN[16], _GEN[17], _GEN[19], _GEN[20], _GEN[21], _GEN[22], _GEN[23],
                _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[28], _GEN[29]}, &_io_sig_T_44, &_io_sig_T_50,
                &{io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], io_inst[5], io_inst[6],
                io_inst[12]}, &_io_sig_T_64, &{io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4],
                io_inst[5], io_inst[6], io_inst[13]}, &_io_sig_T_82, &_io_sig_T_84, &_io_sig_T_98,
                &{io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4], io_inst[5], io_inst[6], _GEN[5],
                _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[12], _GEN[13], _GEN[14], _GEN[15], _GEN[16],
                _GEN[17], _GEN[18], io_inst[21], _GEN[20], _GEN[21], _GEN[22], _GEN[23], _GEN[24],
                _GEN[25], _GEN[28], _GEN[29]}} == 20'h0;	// Cat.scala:33:92, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39
  assign io_sig_csr_type = {|{&_io_sig_T_52, &_io_sig_T_108}, |{&_io_sig_T_74, &_io_sig_T_102, &_io_sig_T_108},
                |{&_io_sig_T_62, &_io_sig_T_92, &{io_inst[0], io_inst[1], _GEN[0], _GEN[1], io_inst[4],
                io_inst[5], io_inst[6], _GEN[5], _GEN[6], _GEN[7], _GEN[8], _GEN[9], _GEN[11], _GEN[12],
                _GEN[13], _GEN[14], _GEN[15], _GEN[16], _GEN[17], io_inst[20], _GEN[19], _GEN[20],
                _GEN[21], _GEN[22], _GEN[23], _GEN[24], _GEN[25], _GEN[26], _GEN[27], _GEN[28], _GEN[29]}}};	// Cat.scala:33:92, Control.scala:137:71, pla.scala:78:21, :90:45, :91:29, :98:74, :114:39
endmodule

module Core(
  input         clock,
                reset,
                io_imem_gnt,
                io_imem_rvalid,
                io_imem_err,
  input  [31:0] io_imem_rdata,
  input         io_dmem_gnt,
                io_dmem_rvalid,
                io_dmem_err,
  input  [31:0] io_dmem_rdata,
  output        io_imem_req,
  output [31:0] io_imem_addr,
  output        io_dmem_req,
  output [31:0] io_dmem_addr,
  output        io_dmem_we,
  output [3:0]  io_dmem_be,
  output [31:0] io_dmem_wdata);

  wire [1:0]  _control_io_sig_pc_sel;	// Core.scala:48:23
  wire [1:0]  _control_io_sig_a_sel;	// Core.scala:48:23
  wire [1:0]  _control_io_sig_b_sel;	// Core.scala:48:23
  wire [2:0]  _control_io_sig_imm_sel;	// Core.scala:48:23
  wire [3:0]  _control_io_sig_alu_op;	// Core.scala:48:23
  wire [2:0]  _control_io_sig_br_type;	// Core.scala:48:23
  wire        _control_io_sig_inst_kill;	// Core.scala:48:23
  wire [1:0]  _control_io_sig_st_type;	// Core.scala:48:23
  wire [2:0]  _control_io_sig_ld_type;	// Core.scala:48:23
  wire [1:0]  _control_io_sig_wb_sel;	// Core.scala:48:23
  wire        _control_io_sig_wb_en;	// Core.scala:48:23
  wire        _control_io_sig_illegal;	// Core.scala:48:23
  wire [2:0]  _control_io_sig_csr_type;	// Core.scala:48:23
  wire        _csr_io_epc_valid;	// Core.scala:46:19
  wire [31:0] _csr_io_epc_bits;	// Core.scala:46:19
  wire [31:0] _csr_io_rdata;	// Core.scala:46:19
  wire        _writeback_io_rf_wen;	// Core.scala:45:25
  wire [4:0]  _writeback_io_rf_waddr;	// Core.scala:45:25
  wire [31:0] _writeback_io_rf_wdata;	// Core.scala:45:25
  wire [4:0]  _execute_io_data_rd;	// Core.scala:44:23
  wire [11:0] _execute_io_data_csr;	// Core.scala:44:23
  wire [31:0] _execute_io_data_alu_out;	// Core.scala:44:23
  wire        _execute_io_data_br_taken;	// Core.scala:44:23
  wire        _execute_io_dmem_req;	// Core.scala:44:23
  wire        _execute_io_dmem_we;	// Core.scala:44:23
  wire [4:0]  _execute_io_rf_rs1;	// Core.scala:44:23
  wire [4:0]  _execute_io_rf_rs2;	// Core.scala:44:23
  wire [31:0] _fetch_io_pc;	// Core.scala:43:21
  wire [31:0] _rf_io_rdata1;	// Core.scala:41:18
  wire [31:0] _rf_io_rdata2;	// Core.scala:41:18
  reg         started;	// Core.scala:50:24
  reg         prev_imem_rd_req;	// Core.scala:54:33
  reg         prev_dmem_rd_req;	// Core.scala:55:33
  reg         prev_dmem_wr_req;	// Core.scala:56:33
  wire        _stall_T_8 = prev_imem_rd_req & ~io_imem_rvalid | prev_dmem_rd_req & ~io_dmem_rvalid | prev_dmem_wr_req
                & ~io_dmem_gnt | started;	// Core.scala:50:24, :54:33, :55:33, :56:33, :58:{30,33}, :59:{23,26}, :60:{23,26,40}
  reg  [31:0] pc;	// Reg.scala:19:16
  reg  [31:0] inst;	// Reg.scala:35:20
  reg  [1:0]  wb_sel;	// Reg.scala:19:16
  reg         wb_en;	// Reg.scala:19:16
  reg  [2:0]  ld_type;	// Reg.scala:19:16
  reg  [2:0]  csr_type;	// Reg.scala:19:16
  reg         illegal;	// Reg.scala:19:16
  reg  [4:0]  rd;	// Reg.scala:19:16
  reg  [31:0] pc_1;	// Reg.scala:19:16
  reg  [31:0] alu_out;	// Reg.scala:19:16
  reg  [11:0] csr_1;	// Reg.scala:19:16
  reg  [4:0]  rs1;	// Reg.scala:19:16
  reg  [31:0] rs1r;	// Reg.scala:19:16
  wire        _T = wb_sel == 2'h0;	// Core.scala:144:29, Reg.scala:19:16
  wire [31:0] _GEN = wb_en & _T & |_execute_io_rf_rs1 & _execute_io_rf_rs1 == rd ? alu_out : _rf_io_rdata1;	// Core.scala:41:18, :44:23, :83:22, :135:{38,52}, :138:16, :139:10, :144:{29,43}, Reg.scala:19:16
  always @(posedge clock) begin
    started <= reset;	// Core.scala:50:24
    prev_imem_rd_req <= 1'h1;	// Core.scala:43:21, :54:33
    prev_dmem_rd_req <= _execute_io_dmem_req & ~_execute_io_dmem_we;	// Core.scala:44:23, :55:{33,46,49}
    prev_dmem_wr_req <= _execute_io_dmem_req & _execute_io_dmem_we;	// Core.scala:44:23, :56:{33,46}
    pc <= _stall_T_8 ? pc : _fetch_io_pc;	// Core.scala:43:21, :60:40, Reg.scala:19:16, :20:{18,22}
    wb_sel <= _stall_T_8 ? wb_sel : _control_io_sig_wb_sel;	// Core.scala:48:23, :60:40, Reg.scala:19:16, :20:{18,22}
    wb_en <= _stall_T_8 ? wb_en : _control_io_sig_wb_en;	// Core.scala:48:23, :60:40, Reg.scala:19:16, :20:{18,22}
    ld_type <= _stall_T_8 ? ld_type : _control_io_sig_ld_type;	// Core.scala:48:23, :60:40, Reg.scala:19:16, :20:{18,22}
    csr_type <= _stall_T_8 ? csr_type : _control_io_sig_csr_type;	// Core.scala:48:23, :60:40, Reg.scala:19:16, :20:{18,22}
    illegal <= _stall_T_8 ? illegal : _control_io_sig_illegal;	// Core.scala:48:23, :60:40, Reg.scala:19:16, :20:{18,22}
    rd <= _stall_T_8 ? rd : _execute_io_data_rd;	// Core.scala:44:23, :60:40, Reg.scala:19:16, :20:{18,22}
    pc_1 <= _stall_T_8 ? pc_1 : pc;	// Core.scala:60:40, Reg.scala:19:16, :20:{18,22}
    alu_out <= _stall_T_8 ? alu_out : _execute_io_data_alu_out;	// Core.scala:44:23, :60:40, Reg.scala:19:16, :20:{18,22}
    csr_1 <= _stall_T_8 ? csr_1 : _execute_io_data_csr;	// Core.scala:44:23, :60:40, Reg.scala:19:16, :20:{18,22}
    rs1 <= _stall_T_8 ? rs1 : _execute_io_rf_rs1;	// Core.scala:44:23, :60:40, Reg.scala:19:16, :20:{18,22}
    rs1r <= _stall_T_8 ? rs1r : _GEN;	// Core.scala:60:40, :83:22, :138:16, :139:10, Reg.scala:19:16, :20:{18,22}
    if (reset)
      inst <= 32'h13;	// Core.scala:67:27, Reg.scala:35:20
    else
      inst <= _stall_T_8 ? inst : _control_io_sig_inst_kill | _execute_io_data_br_taken | started ?
                                                32'h13 : io_imem_rdata;	// Core.scala:44:23, :48:23, :50:24, :60:40, :67:27, :148:65, Reg.scala:35:20, :36:{18,22}
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef RANDOMIZE_REG_INIT
      reg [223:0] _RANDOM;	// Core.scala:50:24
    `endif
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      `INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM = {`RANDOM,`RANDOM,`RANDOM,`RANDOM,`RANDOM,`RANDOM,`RANDOM};	// Core.scala:50:24
        started = _RANDOM[0];	// Core.scala:50:24
        prev_imem_rd_req = _RANDOM[1];	// Core.scala:54:33
        prev_dmem_rd_req = _RANDOM[2];	// Core.scala:55:33
        prev_dmem_wr_req = _RANDOM[3];	// Core.scala:56:33
        pc = _RANDOM[35:4];	// Reg.scala:19:16
        inst = _RANDOM[67:36];	// Reg.scala:35:20
        wb_sel = _RANDOM[69:68];	// Reg.scala:19:16
        wb_en = _RANDOM[70];	// Reg.scala:19:16
        ld_type = _RANDOM[73:71];	// Reg.scala:19:16
        csr_type = _RANDOM[76:74];	// Reg.scala:19:16
        illegal = _RANDOM[81];	// Reg.scala:19:16
        rd = _RANDOM[86:82];	// Reg.scala:19:16
        pc_1 = _RANDOM[118:87];	// Reg.scala:19:16
        alu_out = _RANDOM[150:119];	// Reg.scala:19:16
        csr_1 = _RANDOM[162:151];	// Reg.scala:19:16
        rs1 = _RANDOM[167:163];	// Reg.scala:19:16
        rs1r = _RANDOM[199:168];	// Reg.scala:19:16
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  RegFile rf (	// Core.scala:41:18
    .clock     (clock),
    .io_wen    (_writeback_io_rf_wen),	// Core.scala:45:25
    .io_raddr1 (_execute_io_rf_rs1),	// Core.scala:44:23
    .io_raddr2 (_execute_io_rf_rs2),	// Core.scala:44:23
    .io_waddr  (_writeback_io_rf_waddr),	// Core.scala:45:25
    .io_wdata  (_writeback_io_rf_wdata),	// Core.scala:45:25
    .io_rdata1 (_rf_io_rdata1),
    .io_rdata2 (_rf_io_rdata2)
  );
  Fetch fetch (	// Core.scala:43:21
    .clock          (clock),
    .reset          (reset),
    .io_ctrl_pc_sel (_control_io_sig_pc_sel),	// Core.scala:48:23
    .io_ctrl_stall  (_stall_T_8),	// Core.scala:60:40
    .io_epc_valid   (_csr_io_epc_valid),	// Core.scala:46:19
    .io_epc_bits    (_csr_io_epc_bits),	// Core.scala:46:19
    .io_br_taken    (_execute_io_data_br_taken),	// Core.scala:44:23
    .io_alu_out     (_execute_io_data_alu_out),	// Core.scala:44:23
    .io_imem_addr   (io_imem_addr),
    .io_pc          (_fetch_io_pc)
  );
  Execute execute (	// Core.scala:44:23
    .io_ctrl_imm_sel  (_control_io_sig_imm_sel),	// Core.scala:48:23
    .io_ctrl_ld_type  (_control_io_sig_ld_type),	// Core.scala:48:23
    .io_ctrl_st_type  (_control_io_sig_st_type),	// Core.scala:48:23
    .io_ctrl_alu_op   (_control_io_sig_alu_op),	// Core.scala:48:23
    .io_ctrl_a_sel    (_control_io_sig_a_sel),	// Core.scala:48:23
    .io_ctrl_b_sel    (_control_io_sig_b_sel),	// Core.scala:48:23
    .io_ctrl_br_type  (_control_io_sig_br_type),	// Core.scala:48:23
    .io_data_inst     (inst),	// Reg.scala:35:20
    .io_data_pc       (pc),	// Reg.scala:19:16
    .io_rf_rs1r       (_GEN),	// Core.scala:83:22, :138:16, :139:10
    .io_rf_rs2r       (wb_en & _T & |_execute_io_rf_rs2 & _execute_io_rf_rs2 == rd ? alu_out : _rf_io_rdata2),	// Core.scala:41:18, :44:23, :84:22, :135:{38,52}, :138:16, :139:10, :144:29, :145:43, Reg.scala:19:16
    .io_data_rd       (_execute_io_data_rd),
    .io_data_csr      (_execute_io_data_csr),
    .io_data_alu_out  (_execute_io_data_alu_out),
    .io_data_br_taken (_execute_io_data_br_taken),
    .io_dmem_req      (_execute_io_dmem_req),
    .io_dmem_addr     (io_dmem_addr),
    .io_dmem_we       (_execute_io_dmem_we),
    .io_dmem_be       (io_dmem_be),
    .io_dmem_wdata    (io_dmem_wdata),
    .io_rf_rs1        (_execute_io_rf_rs1),
    .io_rf_rs2        (_execute_io_rf_rs2)
  );
  Writeback writeback (	// Core.scala:45:25
    .io_ctrl_wb_sel    (wb_sel),	// Reg.scala:19:16
    .io_ctrl_wb_en     (wb_en),	// Reg.scala:19:16
    .io_ctrl_ld_type   (ld_type),	// Reg.scala:19:16
    .io_data_ld        (io_dmem_rdata),
    .io_data_pc        (pc_1),	// Reg.scala:19:16
    .io_data_alu_out   (alu_out),	// Reg.scala:19:16
    .io_data_csr_rdata (_csr_io_rdata),	// Core.scala:46:19
    .io_data_rd        ({27'h0, rd}),	// Core.scala:124:24, Reg.scala:19:16
    .io_rf_wen         (_writeback_io_rf_wen),
    .io_rf_waddr       (_writeback_io_rf_waddr),
    .io_rf_wdata       (_writeback_io_rf_wdata)
  );
  Csr csr (	// Core.scala:46:19
    .clock            (clock),
    .reset            (reset),
    .io_ctrl_csr_type (csr_type),	// Reg.scala:19:16
    .io_ctrl_illegal  (illegal),	// Reg.scala:19:16
    .io_pc            (pc_1),	// Reg.scala:19:16
    .io_csr           (csr_1),	// Reg.scala:19:16
    .io_rs1           (rs1),	// Reg.scala:19:16
    .io_wdata         (rs1r),	// Reg.scala:19:16
    .io_epc_valid     (_csr_io_epc_valid),
    .io_epc_bits      (_csr_io_epc_bits),
    .io_rdata         (_csr_io_rdata)
  );
  Control control (	// Core.scala:48:23
    .io_inst          (inst),	// Reg.scala:35:20
    .io_sig_pc_sel    (_control_io_sig_pc_sel),
    .io_sig_a_sel     (_control_io_sig_a_sel),
    .io_sig_b_sel     (_control_io_sig_b_sel),
    .io_sig_imm_sel   (_control_io_sig_imm_sel),
    .io_sig_alu_op    (_control_io_sig_alu_op),
    .io_sig_br_type   (_control_io_sig_br_type),
    .io_sig_inst_kill (_control_io_sig_inst_kill),
    .io_sig_st_type   (_control_io_sig_st_type),
    .io_sig_ld_type   (_control_io_sig_ld_type),
    .io_sig_wb_sel    (_control_io_sig_wb_sel),
    .io_sig_wb_en     (_control_io_sig_wb_en),
    .io_sig_illegal   (_control_io_sig_illegal),
    .io_sig_csr_type  (_control_io_sig_csr_type)
  );
  assign io_imem_req = 1'h1;	// Core.scala:43:21
  assign io_dmem_req = _execute_io_dmem_req;	// Core.scala:44:23
  assign io_dmem_we = _execute_io_dmem_we;	// Core.scala:44:23
endmodule

